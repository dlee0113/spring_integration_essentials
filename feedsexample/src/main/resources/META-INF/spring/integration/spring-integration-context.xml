<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int-feed="http://www.springframework.org/schema/integration/feed"
	xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xmlns:int-mail="http://www.springframework.org/schema/integration/mail"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/integration/jpa http://www.springframework.org/schema/integration/jpa/spring-integration-jpa.xsd
		http://www.springframework.org/schema/integration/feed http://www.springframework.org/schema/integration/feed/spring-integration-feed.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
		http://www.springframework.org/schema/integration/mail http://www.springframework.org/schema/integration/mail/spring-integration-mail.xsd">


   <context:component-scan base-package="com.cpandey"/>
   <context:property-placeholder location="classpath*:**/settings.properties" />
	<import resource="classpath*:**/spring-integration-ftp.xml" />
	<import resource="classpath*:**/spring-integration-jms.xml" /> 
	<import resource="classpath*:**/spring-integration-jmx.xml" />

	
	<!-- Global Poller -->
	<int:poller default="true" fixed-rate="20000" />
	
	<int-feed:inbound-channel-adapter id="soJavaFeedAdapterForAggregator" 
					channel="fetchedFeedChannel" 
					auto-startup="true" 
					url="${feeds.url}">
		<int:poller fixed-rate="500" max-messages-per-poll="1" />
	</int-feed:inbound-channel-adapter>
	
	
	<!-- Message is read by feed inbound channel adapter and put on this channel, which is picked up by the filter for processing -->
	<int:channel id="fetchedFeedChannel">
		<int:queue/>
	</int:channel>
	<int:channel id="fetchedFeedChannelForAggregatior">
		<int:queue/>
	</int:channel>
	<int:channel id="aggregatedFeedChannel"/>
	<int:publish-subscribe-channel id="splittedFeedChannel"/>

<!-- Let transformers put the message on transformedChannel, from there based on payload it will be routed to proper channel -->	
	<int:channel id="transformedChannel"/>
	
<!-- Channels for external components -->
	<int:channel id="jdbcChannel"/>
<!-- 	<int:channel id="jmsChannel"/> -->
	<int:channel id="mailChannel"/>
	<int:channel id="logChannel">
		<int:queue/>
	</int:channel>

	<bean id="filterSoFeedBean" class="com.cpandey.siexample.filter.SoFeedFilter"/>
	<bean id="feedDbTransformerBean" class="com.cpandey.siexample.transformer.SoFeedDbTransformer" />
	<bean id="feedJMSTransformerBean" class="com.cpandey.siexample.transformer.SoFeedJMSTransformer" />
	<bean id="feedMailTransformerBean" class="com.cpandey.siexample.transformer.SoFeedMailTransformer" />
	<bean id="aggregatorSoFeedBean" class="com.cpandey.siexample.aggregator.SoFeedAggregator"/>
	<bean id="sofeedCompletionStrategyBean" class="com.cpandey.siexample.aggregator.CompletionStrategy"/>
	<bean id="soFeedCorrelationStrategyBean" class="com.cpandey.siexample.aggregator.CorrelationStrategy"/>
	<bean id="splitterSoFeedBean" class="com.cpandey.siexample.splitter.SoFeedSplitter"/>
	
	<!--Filter the feed which are not for Java category -->
	<int:filter input-channel="fetchedFeedChannel" output-channel="fetchedFeedChannelForAggregatior"
    ref="filterSoFeedBean" method="filterFeed"/>
    

	<!-- Aggregator -->
	<int:aggregator input-channel="fetchedFeedChannelForAggregatior"
		output-channel="aggregatedFeedChannel" ref="aggregatorSoFeedBean"
		method="aggregateAndPublish" release-strategy="sofeedCompletionStrategyBean"
		release-strategy-method="checkCompleteness" correlation-strategy="soFeedCorrelationStrategyBean"
		correlation-strategy-method="groupFeedsBasedOnCategory"
		message-store="messageStore" expire-groups-upon-completion="true">
		<int:poller fixed-rate="1000"></int:poller>
	</int:aggregator>
	
	<!-- Splitter -->
	<int:splitter ref="splitterSoFeedBean" method="splitAndPublish" input-channel="aggregatedFeedChannel" output-channel="splittedFeedChannel" />
	
	<bean id="messageStore"	class="org.springframework.integration.store.SimpleMessageStore" />

	<!-- A service activator to validate that  aggregator has grouped message from same category -->	
	<int:service-activator id="logChannelSA" ref="commonServiceActivator"	method="printPayLoad" input-channel="logChannel"	/>

	<!-- Transformers -->
	<int:transformer id="dbFeedTransformer" ref="feedDbTransformerBean" input-channel="splittedFeedChannel"
	             method="transformFeed" output-channel="transformedChannel"/>

	<int:transformer id="jmsFeedTransformer" ref="feedJMSTransformerBean" input-channel="splittedFeedChannel"
	             method="transformFeed" output-channel="transformedChannel"/>

	<int:transformer id="mailFeedTransformer" ref="feedMailTransformerBean" input-channel="splittedFeedChannel"
	             method="transformFeed" output-channel="transformedChannel"/>


	<int:payload-type-router input-channel="transformedChannel" 
		default-output-channel="logChannel">
		<int:mapping type="com.cpandey.siexample.pojo.SoFeed"	
			channel="createFeedRequestChannel" />
		<int:mapping type="java.lang.String" 
			channel="jmsChannel" />
		<int:mapping type="org.springframework.mail.MailMessage" 
			channel="mailChannel" />
	</int:payload-type-router>
	
	<!-- Service activators to put the message in DB -->	
	<int:service-activator ref="persistFeed"	input-channel="jdbcChannel"	/>

	<!-- Send Email -->
	<int-mail:outbound-channel-adapter channel="mailChannel" mail-sender="mailSender"/>
	
	<!--  Email configuration -->
    <bean id="mailSender" 
    	class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.smtp.host">smtp.gmail.com</prop>
                <prop key="mail.smtp.port">587</prop>
            </props>
        </property>
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.password}" />
    </bean>

    
   <!-- JPA Set up -->
   <!-- Feed service is a gateway, The interface is define in Java, and this is its impl
	   When createFeed is called on Feed service, it will place the Pojo on jdbcChannel -so this is a response channel
	   jdbc channel is read by updating-outbound-gateway and that does all the actual update  
   -->
<!-- JDBC -->
	<int:channel id="createFeedRequestChannel"/>
	<int:channel id="readFeedRequestChannel"/>
	<int:channel id="printAllFeedChannel"/>

<!-- Gate request and reply channel concept -->
<!-- . It publishes a Message using feed service and put it on channel identified by request-channel. --> 
<!-- The proxy then blocks the call until it receives a reply from the reply-channel -->
<!-- Typically you don't have to specify the default-reply-channel, since a Gateway will  -->
<!-- auto-create a temporary, anonymous reply channel, where it will listen for the reply.  -->
	
	<int:gateway id="feedService"
		service-interface="com.cpandey.siexample.service.FeedService"
		default-request-timeout="5000" 
		default-reply-timeout="5000">
		<int:method name="createFeed" 
		request-channel="createFeedRequestChannel"/>
		<int:method name="readAllFeed" 
		request-channel="readFeedRequestChannel"/>
	</int:gateway>

	<int-jpa:updating-outbound-gateway 
		entity-manager-factory="entityManagerFactory"
		request-channel="createFeedRequestChannel" 
		entity-class="com.cpandey.siexample.pojo.FeedEntity" 
		reply-channel="printAllFeedChannel">
		<int-jpa:transactional transaction-manager="transactionManager" />
	</int-jpa:updating-outbound-gateway>
	
	<int-jpa:retrieving-outbound-gateway 
		entity-manager-factory="entityManagerFactory"
		request-channel="readFeedRequestChannel"
		jpa-query="select f from FeedEntity f order by f.title asc" 
		reply-channel="printAllFeedChannel">
	</int-jpa:retrieving-outbound-gateway>
	
	<int:service-activator ref="persistFeed" method="printFeed"	input-channel="printAllFeedChannel"	/>

	<!-- Depending on the selected profile, users can use different JPA Providers -->

	<beans profile="default, hibernate">
		<import resource="classpath:/META-INF/spring/integration/spring-integration-hibernate.xml"/>
	</beans>
	
	
</beans>
